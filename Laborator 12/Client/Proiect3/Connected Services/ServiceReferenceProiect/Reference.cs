//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceProiect
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/ModelAndAPI", IsReference=true)]
    public partial class File : object
    {
        
        private System.DateTime CreationDateField;
        
        private string DescriptionField;
        
        private int IdField;
        
        private string NameField;
        
        private string PathField;
        
        private System.Collections.Generic.List<ServiceReferenceProiect.PropertyList> PropertyListsField;
        
        private double SizeField;
        
        private bool ToDeleteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate
        {
            get
            {
                return this.CreationDateField;
            }
            set
            {
                this.CreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferenceProiect.PropertyList> PropertyLists
        {
            get
            {
                return this.PropertyListsField;
            }
            set
            {
                this.PropertyListsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ToDelete
        {
            get
            {
                return this.ToDeleteField;
            }
            set
            {
                this.ToDeleteField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyList", Namespace="http://schemas.datacontract.org/2004/07/ModelAndAPI", IsReference=true)]
    public partial class PropertyList : object
    {
        
        private ServiceReferenceProiect.File FileField;
        
        private int FileIdField;
        
        private int IdField;
        
        private ServiceReferenceProiect.Property PropertyField;
        
        private int PropertyIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceProiect.File File
        {
            get
            {
                return this.FileField;
            }
            set
            {
                this.FileField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FileId
        {
            get
            {
                return this.FileIdField;
            }
            set
            {
                this.FileIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceProiect.Property Property
        {
            get
            {
                return this.PropertyField;
            }
            set
            {
                this.PropertyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyId
        {
            get
            {
                return this.PropertyIdField;
            }
            set
            {
                this.PropertyIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="http://schemas.datacontract.org/2004/07/ModelAndAPI", IsReference=true)]
    public partial class Property : object
    {
        
        private string DescriptionField;
        
        private int IdField;
        
        private System.Collections.Generic.List<ServiceReferenceProiect.PropertyList> PropertyListsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferenceProiect.PropertyList> PropertyLists
        {
            get
            {
                return this.PropertyListsField;
            }
            set
            {
                this.PropertyListsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceProiect.IFileProperty")]
    public interface IFileProperty
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/AddFile", ReplyAction="http://tempuri.org/IFile/AddFileResponse")]
        System.Threading.Tasks.Task<bool> AddFileAsync(ServiceReferenceProiect.File file, System.Collections.Generic.List<int> propertyIndices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/FileSearch", ReplyAction="http://tempuri.org/IFile/FileSearchResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.File>> FileSearchAsync(System.Collections.Generic.List<int> propertyIndices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/ModifyFile", ReplyAction="http://tempuri.org/IFile/ModifyFileResponse")]
        System.Threading.Tasks.Task<bool> ModifyFileAsync(ServiceReferenceProiect.File file, System.Collections.Generic.List<int> propertyIndices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/GetFileProperties", ReplyAction="http://tempuri.org/IFile/GetFilePropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.Property>> GetFilePropertiesAsync(int fileIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/MarkForDeletion", ReplyAction="http://tempuri.org/IFile/MarkForDeletionResponse")]
        System.Threading.Tasks.Task<bool> MarkForDeletionAsync(System.Collections.Generic.List<int> fileIndices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/FinishDeletion", ReplyAction="http://tempuri.org/IFile/FinishDeletionResponse")]
        System.Threading.Tasks.Task<bool> FinishDeletionAsync(bool cancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProperty/AddProperty", ReplyAction="http://tempuri.org/IProperty/AddPropertyResponse")]
        System.Threading.Tasks.Task<bool> AddPropertyAsync(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProperty/GetAllProperties", ReplyAction="http://tempuri.org/IProperty/GetAllPropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.Property>> GetAllPropertiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProperty/DeleteProperties", ReplyAction="http://tempuri.org/IProperty/DeletePropertiesResponse")]
        System.Threading.Tasks.Task<bool> DeletePropertiesAsync(System.Collections.Generic.List<int> propertyIndices);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IFilePropertyChannel : ServiceReferenceProiect.IFileProperty, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class FilePropertyClient : System.ServiceModel.ClientBase<ServiceReferenceProiect.IFileProperty>, ServiceReferenceProiect.IFileProperty
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FilePropertyClient() : 
                base(FilePropertyClient.GetDefaultBinding(), FilePropertyClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFileProperty.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FilePropertyClient(EndpointConfiguration endpointConfiguration) : 
                base(FilePropertyClient.GetBindingForEndpoint(endpointConfiguration), FilePropertyClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FilePropertyClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FilePropertyClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FilePropertyClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FilePropertyClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FilePropertyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> AddFileAsync(ServiceReferenceProiect.File file, System.Collections.Generic.List<int> propertyIndices)
        {
            return base.Channel.AddFileAsync(file, propertyIndices);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.File>> FileSearchAsync(System.Collections.Generic.List<int> propertyIndices)
        {
            return base.Channel.FileSearchAsync(propertyIndices);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyFileAsync(ServiceReferenceProiect.File file, System.Collections.Generic.List<int> propertyIndices)
        {
            return base.Channel.ModifyFileAsync(file, propertyIndices);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.Property>> GetFilePropertiesAsync(int fileIndex)
        {
            return base.Channel.GetFilePropertiesAsync(fileIndex);
        }
        
        public System.Threading.Tasks.Task<bool> MarkForDeletionAsync(System.Collections.Generic.List<int> fileIndices)
        {
            return base.Channel.MarkForDeletionAsync(fileIndices);
        }
        
        public System.Threading.Tasks.Task<bool> FinishDeletionAsync(bool cancel)
        {
            return base.Channel.FinishDeletionAsync(cancel);
        }
        
        public System.Threading.Tasks.Task<bool> AddPropertyAsync(string description)
        {
            return base.Channel.AddPropertyAsync(description);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceProiect.Property>> GetAllPropertiesAsync()
        {
            return base.Channel.GetAllPropertiesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> DeletePropertiesAsync(System.Collections.Generic.List<int> propertyIndices)
        {
            return base.Channel.DeletePropertiesAsync(propertyIndices);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFileProperty))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFileProperty))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/FP");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FilePropertyClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFileProperty);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FilePropertyClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFileProperty);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IFileProperty,
        }
    }
}
